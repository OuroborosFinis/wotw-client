name: Build WotW Rando

on:
  push:
    branches:
      - master
    tags:
      - '*'

jobs:
  meta:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.get_branch.outputs.branch }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Get Branch
        run: |
          branch=$(git branch -r --contains ${{ github.ref }} | grep -oP 'origin/\K\w+' | tail -1)
          echo branch=$branch
          echo ref=${{ github.ref }}
          echo ::set-output name=branch::$branch
  build:
    runs-on: windows-2019
    needs: meta
    steps:
      - name: Set up directories
        run: "md -Path 'C:\\moon'"
      - name: Check out repository code
        uses: actions/checkout@v2
      - name: Install MSVC developer tools
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
      - name: Install LLVM and Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "12.0.1"
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Setup Rust
        uses: ATiltedTree/setup-rust@v1
        with:
          rust-version: stable
      - name: Generate solution
        shell: cmd
        run: "gen_win64_vs2019.bat"
      - name: Compile Wotw Rando
        shell: cmd
        run: |
          msbuild -t:CMakePredefinedTargets\INSTALL_RUNTIME -p:Configuration=RelWithDebInfo -p:Platform=x64 build\win64\WotWRandomizer.sln
          IF ERRORLEVEL 1 (
            echo BUILD FAILED
            exit 1
          )
      - name: Build Seedgen
        shell: cmd
        run: |
          cd projects/SeedgenCli
          cargo build --release
          copy ".\target\release\seedgen.exe" "C:\moon\seedgen.exe"
          C:\ProgramData\Chocolatey\bin\7z.exe a -tzip C:\moon\headers_presets.zip headers presets
          copy ".\loc_data.csv" "C:\moon\loc_data.csv" /Y
          copy ".\state_data.csv" "C:\moon\state_data.csv" /Y
          copy ".\areas.wotw" "C:\moon\areas.wotw" /Y
      - name: Compiling AHK scripts
        shell: cmd
        timeout-minutes: 1
        run: |
          ".\ext\ahk\Ahk2Exe.exe" /in ".\RandoSettings.ahk" /icon ".\WotwRando.ico" /out "C:\moon\RandoSettings.exe"
          ".\ext\ahk\Ahk2Exe.exe" /in ".\projects/AutoTracker/OriAutoTracker.ahk" /icon ".\WotwRando.ico" /out "C:\moon\ItemTracker.exe"
          ".\ext\ahk\Ahk2Exe.exe" /in ".\WotwRando.ahk" /icon ".\WotwRando.ico" /out "C:\moon\WotwRando.exe"
      - name: Compressing PDBs
        shell: cmd
        run: |
          C:\ProgramData\Chocolatey\bin\7z.exe a -tzip C:\moon\pdbs.zip  C:\moon\InjectDLL.pdb C:\moon\RandoMainDLL.pdb C:\moon\Il2CppModLoader.pdb C:\moon\Common.pdb
      - name: Archive WotwRando.exe
        uses: actions/upload-artifact@v2
        with:
          name: wotw-rando-exe
          path: 'C:\moon\WotwRando.exe'
      - name: Archive PDBs
        uses: actions/upload-artifact@v2
        with:
          name: pdbs
          path: 'C:\moon\pdbs.zip'
      - name: Create draft release
        if: ${{ needs.meta.outputs.branch == 'master' && startsWith('refs/tags/', github.ref) }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: v${{ github.ref }}
          body: TODO
          draft: true
          prerelease: false
      - name: Release WotwRando.exe
        if: ${{ needs.meta.outputs.branch == 'master' && startsWith('refs/tags/', github.ref) }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: 'C:\moon\WotwRando.exe'
          asset_name: WotwRando.exe
          asset_content_type: application/octet-stream
      - name: Release VERSION
        if: ${{ needs.meta.outputs.branch == 'master' && startsWith('refs/tags/', github.ref) }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: 'C:\moon\VERSION'
          asset_name: VERSION
          asset_content_type: text/plain
